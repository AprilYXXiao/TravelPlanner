Question for frontend:
	Manually or recommend 2 xuan 1 ?
	前端是否需要显示history page ?
	Save routes,  我们需要包含路线各个地点完整信息的JSON？
	前端发送的JSON Array 中包含旅游的时间？(for each route)
	


我们细看：
Google Distance Matrix api:

6/22/2019 Meeting:
目标：梳理后端架构，明确推荐算法，分配每个人负责模块。
Update this part if you have time:
https://github.com/flagcamp-pegasus/TravelPlanner/blob/master/Functuonality.md



Support HTTP method: POST,  GET, (DELETE 是否显示history page）

目前后端有的部分：
POST login/logout/register : save users info 
	1:String getFullname(String userId)
	2.boolean verifyLogin(String userId, String password)
	3.boolean registerUser(String userId, String password, String firstname, String lastname)
POST(if is a button ) : recommend (build & test): BFS2 


backend input: List<Places> place
step:
parse JSON array => List<Places> place
call function to get recommend routes => List<Places> place
(matrix in parent method, call Google API to fill in matrix)
parse  List<Places> place to JSON Array to frontend 

POST: save routes: save routes (看前端传什么)
Input: userId, list<Places>places
1: 前端发给我们JSON array(前端给时间)
Step:
	1: parse JSON array (Place class)
	2: place_id, the first place, save place(put to database)
	3: routes: places[], put place_id put into places[]
	4: generate routes_id, save route_id, places[] to routes table
	5: save routes_id to user table based on userId
	

class:
class Place{
	long lat;
	long lon;
	….
}


method:
getFullname(String userId)
boolean verifyLogin(String userId, String password)
boolean registerUser(String userId, String password, String firstname, String lastname)
parseToPlace()
recommendRoutes(List<Place> place)
getDistance(Place p1, Place p2)
generateDistanceMatrix(String listofplace)
compare with TicketMaster API
writeJsonArray(HttpServletResponse response, JSONArray array)
writeJsonObject(HttpServletResponse response, JSONObject obj)
JSONObject readJSONObject(HttpServletRequest request)
generatePlaceId();
generateRoutesId();
generateUserId();
savePlaceToRoutes();
saveRoutesToUser(String userID, String routes_id);
saveRoutesToRoutes(String routes_id);













Data Structure: MongoDB
login/ logout/ register/
name: users
{	
	user_id:
	first_name: 
	last_name:
	password:
}


Name : places

{
	{
	place_id: 
	location:{
		lat:
		lng:
	}


	name:
	}
}

Name : routes 
{
	{
	routeId: (= userId)
	startDate: 
	ithDay: 0,1,2
	routes: [
		place id, 
		place id,
		]	
	},

	{
	routeId:
	startDate: 
	ithDay: 0,1,2
	routes: [
		place id, 
		place id,
		]	
	},
	
	...
}


/*rpc Endpoint:*/

recommend
{
ith_day: xxx,
routes: {
		{
			lat:xxx
			lng:xxx
		}
		{
			lat:xxx
			lng:xxx
		}
		{
			lat:xxx
			lng:xxx
		}
	}
}


history

eg: 3 days' trip, each day have 3 places to go.
```
[
    [
        {
            "name": "New York1",
            "location": {
                "lng": 1.1,
                "lat": 1111.1
            },
            "place_id": "1"
        },
        {
            "name": "New York2",
            "location": {
                "lng": 2.2,
                "lat": 2222.2
            },
            "place_id": "2"
        },
        {
            "name": "New York3",
            "location": {
                "lng": 3.3,
                "lat": 3333.3
            },
            "place_id": "3"
        }
    ],
    [
        {
            "name": "New York4",
            "location": {
                "lng": 4.4,
                "lat": 4444.4
            },
            "place_id": "4"
        },
        {
            "name": "New York5",
            "location": {
                "lng": 5.5,
                "lat": 5555.5
            },
            "place_id": "5"
        },
        {
            "name": "New York6",
            "location": {
                "lng": 6.6,
                "lat": 6666.6
            },
            "place_id": "6"
        }
    ],
    [
        {
            "name": "New York7",
            "location": {
                "lng": 7.7,
                "lat": 7777.7
            },
            "place_id": "7"
        },
        {
            "name": "New York8",
            "location": {
                "lng": 8.8,
                "lat": 88888.8
            },
            "place_id": "8"
        },
        {
            "name": "New York9",
            "location": {
                "lng": 9.9,
                "lat": 99999.9
            },
            "place_id": "9"
        }
    ]
]

```












